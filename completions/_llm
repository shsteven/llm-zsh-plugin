#compdef llm

# Main completion function
_llm() {
    local curcontext="$curcontext" state line ret=1
    typeset -A opt_args

    # Common options used across subcommands
    local -a common_options=('--help[Show help message]')

    # Helper function to describe commands
    _llm_describe_commands() {
        local -a commands=($@)
        _describe -t commands 'llm commands' commands && ret=0
    }

    # Helper function to describe subcommands
    _llm_describe_subcommands() {
        local -a subcommands=($@)
        _describe -t commands 'subcommands' subcommands && ret=0
    }

    # Helper function to handle options for a subcommand
    _llm_handle_options() {
        local -a options=($@)
        _arguments $common_options $options && ret=0
    }

    # Helper function to fetch dynamic completions
    _llm_fetch_list() {
        local cmd="$1" field="$2" desc="$3"
        local -a items
        # Use simple ':' separator, trim whitespace from the target field, and print if not empty.
        # Add < /dev/null to explicitly make stdin non-interactive for the llm command.
        items=(${(f)"$(llm $cmd < /dev/null 2>/dev/null | awk -F':' -v field="$field" '{
            gsub(/^[[:space:]]+|[[:space:]]+$/, "", $field); # Trim leading/trailing whitespace from target field
            if ($field != "") print $field
        }' | sort -u)"})
        [[ -n $items ]] && _describe "$desc" items || _message "No $desc available"
    }

    # Helper function to fetch raw model IDs and aliases
    _llm_get_models_raw() {
        llm models list 2>/dev/null | awk '
            BEGIN { FS = ": " }
            /aliases:/ {
                model_id = $2
                sub(/ \(.*/, "", model_id); # Remove description like (local)
                print model_id
                # Use match() and substr() for BSD awk compatibility
                if (match($0, /\(aliases: ([^)]+)\)/)) {
                    aliases_str = substr($0, RSTART + 9, RLENGTH - 10) # Extract "alias1, alias2"
                    gsub(/, */, "\n", aliases_str) # Replace commas with newlines
                    print aliases_str
                }
            }
            !/aliases:/ {
                # Handle lines without aliases (just model ID)
                if ($2) print $2
            }
        ' | sort -u
    }

    # Helper function to provide model completions using cache
    _llm_complete_models() {
        # Ensure cache is populated if empty
        # Use (( ! ${#_cached_models[@]} )) to check if array is empty
        if (( ! ${#_cached_models[@]} )); then
            # Populate cache using the raw fetch function
            _cached_models=(${(f)"$(_llm_get_models_raw)"})
        fi
        # Use the cached list for completion
        _describe 'models' _cached_models && ret=0 || ret=1
    }

    # Specific helpers for dynamic completions (keep others, remove old _llm_get_models)
    # Helper function to get templates with descriptions
    _llm_get_templates() {
        local -a templates
        # Execute command, parse "name : content" lines
        templates=(${(f)"$(llm templates list 2>/dev/null | awk '
            BEGIN { FS = " : " } # Split by " : "
            NF >= 2 { # Ensure there are at least two fields
                name = $1
                # Reconstruct content from the second field onwards
                content = ""
                for (i = 2; i <= NF; i++) {
                    content = content (i > 2 ? FS : "") $i
                }
                gsub(/^[[:space:]]+|[[:space:]]+$/, "", content) # Trim whitespace

                # Truncate content for description
                max_len=60
                if (length(content) > max_len) {
                    description = substr(content, 1, max_len) "..."
                } else {
                    description = content
                }
                # Output in "value:description" format for _describe
                # Escape colons in the name itself to avoid confusing _describe
                gsub(/:/, "\\:", name)
                print name ":" description
            }
        ')"})
        _describe 'templates' templates && ret=0 || ret=1
    }
    _llm_get_collections() { _llm_fetch_list "collections list" 1 "collections"; }
    _llm_get_schemas() { _llm_fetch_list "schemas list" 1 "schemas"; }
    _llm_output_formats() {
        local -a formats=('json' 'blob' 'base64' 'hex')
        _describe 'output formats' formats
    }
    _llm_file_formats() {
        local -a formats=('json' 'csv' 'tsv' 'nl')
        _describe 'file formats' formats
    }

    # Helper function to get fragment aliases
    _llm_get_fragment_aliases() {
        local -a aliases
        # Execute command, find lines starting with "- " under "aliases:", extract the alias name
        aliases=(${(f)"$(llm fragments list --aliases 2>/dev/null | awk '
            /^  aliases:/ { in_aliases=1; next } # Set flag when aliases section starts
            in_aliases && /^[[:space:]]+- / { # If in aliases section and line starts with whitespace then "- "
                # Extract the part after "- "
                sub(/^[[:space:]]+- /, ""); # Remove the leading "  - " part
                print $0; # Print the remaining part (the alias)
                # If multiple aliases per fragment are possible, keep processing
                # If only one alias per fragment, uncomment next line:
                # in_aliases=0;
                next
            }
            # Reset flag if we are in aliases section but line doesnt match alias format,
            # OR if a new fragment starts
            (in_aliases && !/^[[:space:]]+- /) || /^- hash:/ {
                in_aliases=0
            }
        ')"})
        _describe 'fragment aliases' aliases && ret=0 || ret=1
    }
 
    # Cache models for performance
    # Declare the cache array globally within the main function scope
    local -a _cached_models
    # Cache is populated on first call to _llm_complete_models if empty

    _arguments -C \
        $common_options \
        '-m+[Model]:model:_llm_complete_models' \
        '-f+[Fragment]:fragment:_llm_get_fragment_aliases' \
        '-t+[Template]:template:_llm_get_templates' \
        '1: :->command' \
        '*:: :->args' && ret=0
 
    case $state in
        command)
            local -a commands=(
                'prompt:Execute a prompt'
                'chat:Hold an ongoing chat'
                'keys:Manage stored API keys'
                'logs:View and manage logs'
                'models:Manage available models'
                'templates:Manage stored templates'
                'collections:Manage embeddings collections'
                'embed:Embed text and return results'
                'embed-multi:Batch embed multiple texts'
                'embed-models:Manage available embedding models'
                'similar:Find similar items'
                'install:Install packages'
                'uninstall:Uninstall packages'
                'plugins:List installed plugins'
                'openai:Interact with OpenAI API'
                'aliases:Manage model aliases'
                'fragments:Manage stored fragments'
                'schemas:Manage stored schemas'
            )
            _llm_describe_commands $commands
            ;;
        args)
            case $words[1] in
                prompt)
                    _llm_handle_options \
                        '-s+[System prompt]:system prompt:_default' \
                        '-m+[Model]:model:_llm_complete_models' \
                        '-a+[Attachment]:attachment:_files' \
                        '--at+[Attachment Type]:type:_default' \
                        '-o+[Options]:options:_default' \
                        '-t+[Template]:template:_llm_get_templates' \
                        '-p+[Template Params]:params:_default' \
                        '--no-stream[Disable streaming]' \
                        '-n[Do not log to database]' \
                        '--log[Log prompt and response]' \
                        '-c[Continue last conversation]' \
                        '--cid+[Conversation ID]:id:_default' \
                        '--key+[API Key]:key:_default' \
                        '--save[Save as template]' \
                        '--async[Run asynchronously]' \
                        '-u[Show token usage]' \
                        '-x[Extract first code block]' \
                        '--xl[Extract last code block]'
                    ;;
                chat)
                    _llm_handle_options \
                        '-s+[System prompt]:system prompt:_default' \
                        '-m+[Model]:model:_llm_complete_models' \
                        '-c[Continue last conversation]' \
                        '--cid+[Conversation ID]:id:_default' \
                        '-t+[Template]:template:_llm_get_templates' \
                        '-p+[Template Params]:params:_default' \
                        '-o+[Options]:options:_default' \
                        '--no-stream[Disable streaming]' \
                        '--key+[API Key]:key:_default'
                    ;;
                keys)
                    local -a subcommands=(
                        'list:List stored API keys'
                        'get:Get a stored API key'
                        'set:Set an API key'
                        'path:Show keys.json location'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            set) _llm_handle_options '1:key name:_default' '--value+[Value to set]:value:_default' ;;
                            get) _llm_handle_options '1:key name:_default' ;;
                            list|path) _llm_handle_options ;;
                        esac
                    fi
                    ;;
                logs)
                    local -a subcommands=(
                        'list:Show recent logs'
                        'on:Enable logging'
                        'off:Disable logging'
                        'status:Show logging status'
                        'path:Show logs.db path'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list)
                                _llm_handle_options \
                                    '-n+[Number of entries]:number:_default' \
                                    '-p+[Path to log database]:path:_files' \
                                    '-m+[Filter by model]:model:_llm_complete_models' \
                                    '-q+[Search query]:query:_default' \
                                    '-t[Truncate output]' \
                                    '-s[Shorter output]' \
                                    '-u[Include token usage]' \
                                    '-r[Just output last response]' \
                                    '-x[Extract first code block]' \
                                    '--xl[Extract last code block]' \
                                    '-c[Show current conversation logs]' \
                                    '--cid+[Show logs for conversation]:id:_default' \
                                    '--json[Output as JSON]'
                                ;;
                            on|off|status|path) _llm_handle_options ;;
                        esac
                    fi
                    ;;
                models)
                    local -a subcommands=(
                        'list:List available models'
                        'add:Add a new model'
                        'remove:Remove a model'
                        'schema:Show model schema'
                        'options:Show model options'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list) _llm_handle_options '1:model:_llm_complete_models' '-q+[Search query]:query:_default' '--json[Output as JSON]' ;;
                            add) _llm_handle_options '1:model name:_default' '2:model type:_default' '3:model options:_default' ;;
                            remove) _llm_handle_options '1:model:_llm_complete_models' ;;
                            schema|options) _llm_handle_options '1:model:_llm_complete_models' ;;
                        esac
                    fi
                    ;;
                embed)
                    _llm_handle_options \
                        '-i+[Input file]:file:_files' \
                        '-m+[Model]:model:_llm_complete_models' \
                        '--store[Store text in database]' \
                        '-d+[Database file]:database:_files' \
                        '-c+[Content to embed]:content:_default' \
                        '--binary[Treat input as binary]' \
                        '--metadata+[JSON metadata]:metadata:_default' \
                        '-f+[Output format]:format:_llm_output_formats'
                    ;;
                embed-multi)
                    _llm_handle_options \
                        '--format+[Input format]:format:_llm_file_formats' \
                        '--files+[Embed files]:files:_files -/' \
                        '--encoding+[File encoding]:encoding:_default' \
                        '--binary[Treat files as binary]' \
                        '--sql+[SQL query]:query:_default' \
                        '--attach+[Attach database]:database:_files' \
                        '--batch-size+[Batch size]:size:_default' \
                        '--prefix+[ID prefix]:prefix:_default' \
                        '-m+[Model]:model:_llm_complete_models' \
                        '--prepend+[Prepend to content]:content:_default' \
                        '--store[Store text in database]' \
                        '-d+[Database file]:database:_files'
                    ;;
                embed-models)
                    local -a subcommands=(
                        'list:List available embedding models'
                        'default:Show or set default model'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list) _llm_handle_options '-q+[Search query]:query:_default' ;;
                            default) _llm_handle_options '--remove-default[Reset to no default]' ;;
                        esac
                    fi
                    ;;
                templates)
                    local -a subcommands=(
                        'list:List available prompt templates'
                        'edit:Edit template using default $EDITOR'
                        'show:Show the specified prompt template'
                        'path:Output the path to templates directory'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            edit|show) _llm_handle_options '1:template name:_llm_get_templates' ;;
                            list|path) _llm_handle_options ;;
                        esac
                    fi
                    ;;
                aliases)
                    local -a subcommands=(
                        'list:List model aliases'
                        'set:Set a model alias'
                        'remove:Remove a model alias'
                        'path:Show alias file path'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list|path) _llm_handle_options ;;
                            set) _llm_handle_options '1:alias:_default' '2:model:_llm_complete_models' ;;
                            remove) _llm_handle_options '1:alias:_default' ;;
                        esac
                    fi
                    ;;
                fragments)
                    local -a subcommands=(
                        'list:List current fragments'
                        'set:Set an alias for a fragment'
                        'remove:Remove a fragment alias'
                        'show:Display the fragment stored under an alias or hash'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list)
                                _llm_handle_options \
                                    '-q+[Search for fragments matching strings]:query:_default' \
                                    '--query+[Search for fragments matching strings]:query:_default' \
                                    '--aliases[Show only fragments with aliases]' \
                                    '--json[Output as JSON]'
                                ;;
                            set) _llm_handle_options '1:alias:_default' '2:fragment path or input:_files' ;;
                            show) _llm_handle_options '1:alias or hash:_llm_get_fragment_aliases' ;;
                            remove) _llm_handle_options '1:alias:_llm_get_fragment_aliases' ;;
                        esac
                    fi
                    ;;
                collections)
                    local -a subcommands=(
                        'list:List collections'
                        'create:Create a collection'
                        'delete:Delete a collection'
                        'add:Add embeddings to a collection'
                        'search:Search a collection'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list) _llm_handle_options '-d+[Database path]:database:_files' ;;
                            create) _llm_handle_options '1:collection name:_default' '-d+[Database file]:database:_files' ;;
                            delete) _llm_handle_options '1:collection name:_llm_get_collections' '-d+[Database file]:database:_files' ;;
                            add) _llm_handle_options '1:collection name:_llm_get_collections' '-d+[Database file]:database:_files' '-i+[Input file]:file:_files' ;;
                            search) _llm_handle_options '1:collection name:_llm_get_collections' '-d+[Database file]:database:_files' '-q+[Query]:query:_default' '-n+[Number of results]:number:_default' ;;
                        esac
                    fi
                    ;;
                schemas)
                    local -a subcommands=(
                        'list:List stored schemas'
                        'dsl:Convert LLM'\''s schema DSL to a JSON schema'
                        'show:Show a stored schema'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        case $words[2] in
                            list) _llm_handle_options ;;
                            dsl) _llm_handle_options '1:schema name:_llm_get_schemas' ;;
                            show) _llm_handle_options '1:schema name:_llm_get_schemas' ;;
                        esac
                    fi
                    ;;
                similar)
                    _llm_handle_options \
                        '-d+[Database file]:database:_files' \
                        '-c+[Collection name]:collection:_llm_get_collections' \
                        '-q+[Query text]:query:_default' \
                        '-i+[Input file]:file:_files' \
                        '-n+[Number of results]:number:_default' \
                        '--binary[Treat input as binary]' \
                        '-m+[Model]:model:_llm_complete_models' \
                        '--metadata-sql+[SQL for metadata filter]:sql:_default' \
                        '--ids-only[Only return IDs]' \
                        '--json[Output as JSON]'
                    ;;
                install)
                    _llm_handle_options \
                        '1:package:_default' \
                        '--upgrade[Upgrade if already installed]'
                    ;;
                uninstall)
                    _llm_handle_options '1:package:_default'
                    ;;
                plugins)
                    _llm_handle_options '--json[Output as JSON]'
                    ;;
                openai)
                    local -a subcommands=(
                        'assistants:Work with OpenAI assistants'
                        'threads:Work with OpenAI threads'
                    )
                    if (( CURRENT == 2 )); then
                        _llm_describe_subcommands $subcommands
                    else
                        local -a subsubcommands=(
                            'list:List items'
                            'create:Create a new item'
                            'delete:Delete an item'
                        )
                        case $words[2] in
                            assistants|threads)
                                if (( CURRENT == 3 )); then
                                    _llm_describe_subcommands $subsubcommands
                                else
                                    _llm_handle_options
                                fi
                                ;;
                        esac
                    fi
                    ;;
            esac
            ;;
    esac

    return ret
}

_llm "$@"